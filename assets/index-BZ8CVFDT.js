var O=Object.defineProperty;var P=(a,t,e)=>t in a?O(a,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):a[t]=e;var i=(a,t,e)=>P(a,typeof t!="symbol"?t+"":t,e);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))s(r);new MutationObserver(r=>{for(const o of r)if(o.type==="childList")for(const l of o.addedNodes)l.tagName==="LINK"&&l.rel==="modulepreload"&&s(l)}).observe(document,{childList:!0,subtree:!0});function e(r){const o={};return r.integrity&&(o.integrity=r.integrity),r.referrerPolicy&&(o.referrerPolicy=r.referrerPolicy),r.crossOrigin==="use-credentials"?o.credentials="include":r.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function s(r){if(r.ep)return;r.ep=!0;const o=e(r);fetch(r.href,o)}})();const p=a=>a*(Math.PI/180),M=a=>{const t=a%(2*Math.PI);return t<=0?2*Math.PI+t:t},A=(a,t,e,s)=>Math.sqrt((e-a)*(e-a)+(s-t)*(s-t)),u={ARROW_RIGHT:"ArrowRight",ARROW_LEFT:"ArrowLeft",ARROW_UP:"ArrowUp",ARROW_DOWN:"ArrowDown"},n=32,W=10,L=15,h=L*n,y=W*n,w=p(60),g=1,D=Math.floor(h/g);class v{constructor(){i(this,"GRID",[[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,0,1,0,0,0,0,0,0,0,0,0,1,0,1],[1,0,1,0,0,0,0,1,0,0,0,0,1,0,1],[1,0,1,0,0,0,0,0,0,0,1,0,0,0,1],[1,0,0,0,0,0,1,0,0,0,1,0,0,0,1],[1,1,1,0,0,1,1,0,0,0,1,0,0,0,1],[1,0,0,0,1,1,1,0,0,0,0,0,0,0,1],[1,0,0,0,0,0,1,0,0,0,0,0,0,0,1],[1,0,0,0,0,0,0,0,1,0,0,0,0,0,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]]);i(this,"MAP_COLOR",{1:"#333",0:"#fff"})}hasWallAt(t,e){return this.GRID[Math.floor(e/n)][Math.floor(t/n)]}render(t){for(let e=0;e<this.GRID.length;e++)for(let s=0;s<this.GRID[0].length;s++){const r=s*n,o=e*n,l=this.MAP_COLOR[this.GRID[e][s]];t.fillStyle=l,t.fillRect(r,o,n-1,n-1)}}}class E{constructor(t){i(this,"MOVE_SPEED",3);i(this,"ROTATION_SPEED",p(3.5));i(this,"RADIUS",3);i(this,"map");i(this,"x");i(this,"y");i(this,"turnDirection");i(this,"walkDirection");i(this,"rotationAngle");i(this,"eventsKeyAssign");i(this,"keysPressed");this.map=t,this.x=h/2,this.y=y/2,this.turnDirection=0,this.walkDirection=0,this.rotationAngle=p(0),this.keysPressed={},this.eventsKeyAssign=Object.values(u),document.addEventListener("keydown",e=>{this.eventsKeyAssign.includes(e.key)&&(this.keysPressed[e.key]=!0)}),document.addEventListener("keyup",e=>{this.eventsKeyAssign.includes(e.key)&&(this.keysPressed[e.key]=!1)})}getTurnDirection(){return this.keysPressed[u.ARROW_RIGHT]?1:this.keysPressed[u.ARROW_LEFT]?-1:0}getWalkDirection(){return this.keysPressed[u.ARROW_UP]?1:this.keysPressed[u.ARROW_DOWN]?-1:0}update(){this.turnDirection=this.getTurnDirection(),this.walkDirection=this.getWalkDirection(),this.rotationAngle+=this.turnDirection*this.ROTATION_SPEED;const t=this.walkDirection*this.MOVE_SPEED,e=this.x+Math.cos(this.rotationAngle)*t,s=this.y+Math.sin(this.rotationAngle)*t;this.map.hasWallAt(e,s)||(this.x=e,this.y=s)}render(t){t.beginPath(),t.fillStyle="red",t.arc(this.x,this.y,this.RADIUS,0,2*Math.PI),t.fill()}}class S{constructor(t,e,s){i(this,"angle");i(this,"player");i(this,"map");i(this,"isFacingDown");i(this,"isFacingUp");i(this,"isFacingRight");i(this,"isFacingLeft");i(this,"wallHitX",0);i(this,"wallHitY",0);i(this,"distance",0);i(this,"color",255);this.angle=M(t),this.player=e,this.map=s,this.isFacingDown=this.angle>0&&this.angle<Math.PI,this.isFacingUp=!this.isFacingDown,this.isFacingRight=this.angle<.5*Math.PI||this.angle>1.5*Math.PI,this.isFacingLeft=!this.isFacingRight}computeFirstIntersection(t){if(t==="horizontal"){const e=this.isFacingUp?Math.floor(this.player.y/n)*n-1e-4:Math.floor(this.player.y/n)*n+n;return{x:this.player.x+(e-this.player.y)/Math.tan(this.angle),y:e}}else{const e=this.isFacingLeft?Math.floor(this.player.x/n)*n-1e-4:Math.floor(this.player.x/n)*n+n,s=this.player.y+(e-this.player.x)*Math.tan(this.angle);return{x:e,y:s}}}computeStepIncrements(t){if(t==="horizontal"){const e=this.isFacingUp?-n:n;return{xa:e/Math.tan(this.angle),ya:e}}else{const e=this.isFacingLeft?-n:n,s=e*Math.tan(this.angle);return{xa:e,ya:s}}}traceRay(t){const{x:e,y:s}=this.computeFirstIntersection(t),{xa:r,ya:o}=this.computeStepIncrements(t);let l=e,c=s;for(;l>=0&&l<=h&&c>=0&&c<=y;){if(this.map.hasWallAt(l,c))return{hitX:l,hitY:c,foundWall:!0};l+=r,c+=o}return{hitX:0,hitY:0,foundWall:!1}}cast(){const t=this.traceRay("horizontal"),e=this.traceRay("vertical"),s=t.foundWall?A(this.player.x,this.player.y,t.hitX,t.hitY):1/0,r=e.foundWall?A(this.player.x,this.player.y,e.hitX,e.hitY):1/0;s<r?(this.wallHitX=t.hitX,this.wallHitY=t.hitY,this.distance=s,this.color=160):(this.wallHitX=e.hitX,this.wallHitY=e.hitY,this.distance=r,this.color=250),this.distance*=Math.cos(this.player.rotationAngle-this.angle),this.color=Math.min(Math.max(this.color*(60/this.distance),0),255)}render(t){t.beginPath(),t.strokeStyle="red",t.moveTo(this.player.x,this.player.y),t.lineTo(this.wallHitX,this.wallHitY),t.stroke()}}class F{constructor(t,e){i(this,"player");i(this,"map");i(this,"rays",[]);this.player=t,this.map=e}castAllRays(){this.rays=[];let t=this.player.rotationAngle-w/2;for(let e=0;e<D;e++){const s=new S(t,this.player,this.map);s.cast(),this.rays.push(s),t+=w/D}}calculateLineProperties(t){const s=32/t.distance*415,r=y/2-s/2,o=s,l=`rgb(${t.color}, ${t.color}, ${t.color})`;return{drawBegin:r,drawEnd:o,color:l}}render(t,e){let s=1;for(const r of this.rays){e&&r.render(e);const{drawBegin:o,drawEnd:l,color:c}=this.calculateLineProperties(r);t.fillStyle=c,t.fillRect(s*g,o,g,l),s++}}}const _=(a,t)=>{setInterval(t,1e3/a)},H=document.querySelector("canvas#pov"),k=document.querySelector("canvas#map"),f=H.getContext("2d"),d=k.getContext("2d");f.canvas.width=h;f.canvas.height=y;d.canvas.width=h;d.canvas.height=y;const m=new v,R=new E(m),I=new F(R,m);_(60,()=>{f.clearRect(0,0,h,y),R.update(),I.castAllRays(),m.render(d),R.render(d),I.render(f,d)});
